#!/bin/sh

### BEGIN INIT INFO
# Provides: dd-agent
# Short-Description: Start and start dd-agent
# Description: dd-agent is the monitoring agent component for Datadog
# Required-Start: $remote_fs
# Required-Stop: $remote_fs
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
### END INIT INFO

set -e

. /lib/lsb/init-functions

AGENTPATH="/usr/bin/dd-agent"
DOGSTATSDPATH="/usr/bin/dogstatsd"
AGENTUSER="dd-agent"
AGENTCONF="/etc/dd-agent/datadog.conf"
USE_SUPERVISOR="/usr/bin/dd-forwarder"
PIDPATH="/var/run/dd-agent"
NAME="datadog-agent"
DESC="datadog agent"
SUPERVISOR_FILE="/etc/supervisor/supervisord.conf"

[ -x $AGENTPATH ] || echo "$AGENTPATH not found"

# Action to take
case "$1" in
  start)
        if [ ! -f $AGENTCONF ]; then
            echo "$AGENTCONF not found. Exiting"
            exit 0;
        fi
        echo -n "Starting $DESC: "


        if [ -f $USE_SUPERVISOR ]; then
            echo -n "(using supervisorctl) "
            supervisorctl -c $SUPERVISOR_FILE start datadog-agent:*
        else
            if [ ! -f $PIDPATH ]; then
                mkdir -p $PIDPATH
            fi
            chown $AGENTUSER $PIDPATH
            su $AGENTUSER -c "env LANG=POSIX $AGENTPATH start init --clean > /dev/null 2>&1"
            su $AGENTUSER -c "env LANG=POSIX $DOGSTATSDPATH start > /dev/null 2>&1"
        fi
        echo "$NAME."
    ;;
  stop)
        if [ ! -f $AGENTCONF ]; then
            echo "$AGENTCONF not found. Exiting"
            exit 0;
        fi

        echo -n "Stopping $DESC: "
        if [ -f $USE_SUPERVISOR ]; then
	    # Prevent errors if not under actual supervision
	    supervised=$(supervisorctl -c $SUPERVISOR_FILE avail | grep datadog-agent | wc -l)
	    if [ $supervised -gt 1 ]; then
            	echo -n "(using supervisorctl) "
            	supervisorctl -c $SUPERVISOR_FILE stop datadog-agent:*
	    else
		# Should have been
                echo -n "(warning: datadog-agent supervisor config is missing) "
            fi
        else
            su $AGENTUSER -c "$AGENTPATH stop init > /dev/null 2>&1"
            su $AGENTUSER -c "$DOGSTATSDPATH stop > /dev/null 2>&1"
        fi

        echo "$NAME."
    ;;
  info)
        su $AGENTUSER -c "$AGENTPATH info" || true
        su $AGENTUSER -c "$DOGSTATSDPATH info" || true
        if [ -f $USE_SUPERVISOR ]; then
            su $AGENTUSER -c "$USE_SUPERVISOR info" || true
        fi
    ;;
  status)
        if [ -f $USE_SUPERVISOR ]; then
            # If we're using supervisor, check the number of datadog processes
            # supervisor is currently controlling, and make sure that it's the
            # same as the number of programs specified in the supervisor config
            # file.

            supervisor_processes=$(supervisorctl -c $SUPERVISOR_FILE status)
            datadog_supervisor_processes=$(echo "$supervisor_processes" |
                                           grep -v pup |
                                           grep $NAME |
                                           grep -c RUNNING)
            supervisor_config_programs=$(grep -v pup $DATADOG_SUPERVISOR_FILE |
                                         grep -c '\[program:')

            if [ "$datadog_supervisor_processes" -ne "$supervisor_config_programs" ]; then
                echo "$supervisor_processes"
                echo "Datadog agent (supervisor) is NOT running all child processes"
                exit 1
            else
                echo "Datadog agent (supervisor) is running all child processes"
                exit 0
            fi
        else
            # If we're not using supervisor, check to see if the agent and
            # dogstatsd are running using ps

            agent_running=$(ps aux| grep -v grep | grep dd-agent -c)
            dogstatsd_running=$(ps aux| grep -v grep | grep dogstatsd -c)
            if [ "$agent_running" -lt 1 ] || [ "$dogstatsd_running" -lt 1 ]; then
                echo "Datadog agent is NOT running"
                exit 1
            else
                echo "Datadog agent is running"
                exit 0
            fi
        fi
    ;;
  restart|force-reload)
        $0 stop
        $0 start
    ;;
  *)
        N=/etc/init.d/$NAME
        echo "Usage: $N {start|stop|restart|info}"
        exit 1
    ;;
esac

exit 0
